<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="14.3.0">
  <help_text/>
  <zoom_level>10</zoom_level>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>260</x>
      <y>290</y>
      <w>260</w>
      <h>120</h>
    </coordinates>
    <panel_attributes>Person
&lt;&lt;synchronized&gt;&gt;
--
-firstName: String [get/set]
-lastName: String [get/set]
--
+Person(firstName, lastName, birthday)
+getStatus(): String</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>0</x>
      <y>240</y>
      <w>200</w>
      <h>130</h>
    </coordinates>
    <panel_attributes>bg=white
You can write accessors
and mutators to define
and implement
( [get/set] ), much more
convenient than writing
getFirstName, setFirstName...</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>630</x>
      <y>190</y>
      <w>210</w>
      <h>130</h>
    </coordinates>
    <panel_attributes>Date
--
-day: int [get]
-month: int [get]
-year: int [get]
--
+Date()
+Date(day, month,year)</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>0</x>
      <y>380</y>
      <w>230</w>
      <h>170</h>
    </coordinates>
    <panel_attributes>bg=white
You can omit typing argument
types for constructors if the
have the same name as one of the
class attributes. The generator is
smart enough to figure out their
types and also write the
implementation of the constructor
ex :
     this.firstName = firstName;
     this.lastName = lastName;
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>510</x>
      <y>240</y>
      <w>140</w>
      <h>100</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
-birthday [get/set]</panel_attributes>
    <additional_attributes>10.0;80.0;120.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>920</x>
      <y>250</y>
      <w>170</w>
      <h>70</h>
    </coordinates>
    <panel_attributes>bg=white
attributes with a getter
only for each one of them</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>290</x>
      <y>600</y>
      <w>390</w>
      <h>100</h>
    </coordinates>
    <panel_attributes>Employee
&lt;&lt;synchronized&gt;&gt;
--
-occupation: String [get/set]
-salary: double [get/set]
--
+Employee(firstName, lastName, birthday, occupation, salary)</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>400</x>
      <y>400</y>
      <w>90</w>
      <h>220</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;70.0;200.0</additional_attributes>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>10</x>
      <y>580</y>
      <w>220</w>
      <h>170</h>
    </coordinates>
    <panel_attributes>bg=white
Smart constructor detection also
works for derived classes. In this
case the constructor will be
implemented like this:

     super(firstName, lastName);
     this.occupation = occupation;
     this.salary = salary;
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>190</x>
      <y>250</y>
      <w>90</w>
      <h>90</h>
    </coordinates>
    <panel_attributes>lt=&lt;-</panel_attributes>
    <additional_attributes>70.0;70.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>220</x>
      <y>340</y>
      <w>60</w>
      <h>80</h>
    </coordinates>
    <panel_attributes>lt=&lt;-</panel_attributes>
    <additional_attributes>40.0;10.0;10.0;60.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>220</x>
      <y>620</y>
      <w>90</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>lt=&lt;-</panel_attributes>
    <additional_attributes>70.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>830</x>
      <y>220</y>
      <w>110</w>
      <h>70</h>
    </coordinates>
    <panel_attributes>lt=&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;90.0;50.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>880</x>
      <y>420</y>
      <w>410</w>
      <h>100</h>
    </coordinates>
    <panel_attributes>Director
&lt;&lt;synchronized&gt;&gt;
--
-department: String [get/set]
-salary: double [get/set]
--
+Director(firstName, lastName, birthday, department, salary, employees)</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>510</x>
      <y>340</y>
      <w>390</w>
      <h>120</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;370.0;100.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>580</x>
      <y>460</y>
      <w>410</w>
      <h>170</h>
    </coordinates>
    <panel_attributes>lt=-&gt;&gt;&gt;&gt;
*-employees [get/add/contains/remove/clear/singular(employee)]</panel_attributes>
    <additional_attributes>100.0;150.0;300.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>990</x>
      <y>590</y>
      <w>300</w>
      <h>170</h>
    </coordinates>
    <panel_attributes>bg=white
attributes that are containers (Collections,
Lists, etc) can have additionnal properties
such as add, contains, remove and clear. The
generator will create the required methods
along with their implementation. IMPORTANT,
if you want auto generated documentation, you
must add a property to indicate the singular
noun of the attribute. In this case, the attribute
properties has the property singular(employee)</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLInterface</id>
    <coordinates>
      <x>560</x>
      <y>80</y>
      <w>140</w>
      <h>70</h>
    </coordinates>
    <panel_attributes>Comparable&lt;Date&gt;</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>630</x>
      <y>90</y>
      <w>150</w>
      <h>120</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;130.0;20.0;130.0;100.0</additional_attributes>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>330</x>
      <y>80</y>
      <w>190</w>
      <h>70</h>
    </coordinates>
    <panel_attributes>bg=white
You can inherit Java built-in
classes and interfaces</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>510</x>
      <y>90</y>
      <w>130</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>lt=&lt;-</panel_attributes>
    <additional_attributes>110.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>170</x>
      <y>160</y>
      <w>240</w>
      <h>80</h>
    </coordinates>
    <panel_attributes>bg=white
You can make classes thread-safe
by adding the &lt;&lt;synchronized&gt;&gt;
property. this way it will make all
of its methods synchronized</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>310</x>
      <y>230</y>
      <w>30</w>
      <h>80</h>
    </coordinates>
    <panel_attributes>lt=&lt;-</panel_attributes>
    <additional_attributes>10.0;60.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>720</x>
      <y>590</y>
      <w>250</w>
      <h>170</h>
    </coordinates>
    <panel_attributes>You can make multiple composition
or aggregation by adding "*" at the
beggining of the arrow message. By
default the type of the attribute
will be a generic Collection (in this
case the class Director will have the
attribute of type Collection&lt;Employee&gt;
and name employees</panel_attributes>
    <additional_attributes/>
  </element>
</diagram>
